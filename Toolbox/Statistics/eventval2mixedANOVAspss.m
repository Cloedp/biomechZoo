function eventval2mixedANOVAspss

% This function will output data to excel for repeated measures statistical analysis in SPSS.
%
% NOTES
% - Data must have been run through eventval.m
% - Data will be outputted in a simple excel format, you can then use sorting
%   functions in excel to tailor the output to your SPSS needs


% Revision History
%
% Created by Philippe C. Dixon March 2010
%
% Updated Philippe C. Dixon August 2012
% - fixed bug when header name is too long
%
% Updated Philippe C. Dixon October 2014
% - added summary sheet called 'alldata'. This contains all data for each ch/event
%   in one sheet that can be read directly by SPSS. Useful when there are
%   many ch/events to analyse
% - added possible excel colums to 'ZZ'
%
% Updated April 7th 2015
% - works with any consistent subject names, not only 'subject'


% Part of the Zoosystem Biomechanics Toolbox 
%
% Main contributors:
% Philippe C. Dixon, Dept of Engineering Science. University of Oxford. Oxford, UK.
% Yannick Michaud-Paquette, Dept of Kinesiology. McGill University. Montreal, Canada.
% JJ Loh, Medicus Corda. Montreal, Canada.
%
% Contact:
% philippe.dixon@gmail.com
%
% Web:
% https://github.com/PhilD001/the-zoosystem
%
% Referencing:
% please reference the paper below if the zoosystem was used in the preparation of a manuscript:
% Dixon PC, Loh JJ, Michaud-Paquette Y, Pearsall DJ. The Zoosystem: An Open-Source Movement Analysis
% Matlab Toolbox.  Proceedings of the 23rd meeting of the European Society of Movement Analysis in
% Adults and Children. Rome, Italy.Sept 29-Oct 4th 2014.





%------- LOAD EXCEL DATA from eventval.m------------


[f,p] = uigetfile('*.xls','select eventval xls file');
cd(p)
tic
[~, ch] = xlsfinfo([p,f]);

stk = {};
for i =1:length(ch)
    if isempty(strfind(ch{i},'Sheet')) %----------Keep only the channels generated by eventval.m----------
        plate = ch{i};
        stk = [stk plate];
    end
end

ch = stk;



%---CREATE NEW XLS FILE --------

indx = strfind(f,'.');
fn = [f(1:indx-1) '_2mixedANOVAspss.xls'];
xlsfile = [p,fn];
%
% [f2,p2] = uigetfile('*.xls','select blank xls file to write to');
% xlsfile = [p2,f2];


%--------------OPEN EXCEL SERVER----------

Excel = actxserver ('Excel.Application');
File=xlsfile ; %'C:\YourFileFolder\FileName';
if ~exist(File,'file')
    ExcelWorkbook = Excel.workbooks.Add;
    ExcelWorkbook.SaveAs(File,1);
    ExcelWorkbook.Close(false);
end
invoke(Excel.Workbooks,'Open',File);

disp('setting up new xls file')



disp(' ')
disp('writing to xls file')


%---------------------GROUP EXCEL DATA INTO STRUCT-----

% get all column names for excel from 'B' to  'ZZ'
cols1 = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'}';
cols = cell(length(cols1)^2,1);
cols = [cols1(2:end); cols];
  
count = length(cols1);
for c = 1:length(cols1)
    for d = 1:length(cols1)
        cols{count} = [cols1{c},cols1{d}]; 
       count = count+1;
    end
end




for j = 1:length(ch)
    
    count = 1;
    
    [xlsdata,txt] = xlsread([p,f],ch{j});
    
    events = txt(2,4:end);
    events(cellfun(@isempty,events)) = [];   % return cell array of strings for events for channel j
    
    txt = txt(4:end,:);
    conditions = unique(txt(:,2));      % return cell array of strings for condition names for channel j
    subjects = unique(txt(:,1));        % return cell array of strings for subjects names for channel j
    
    cons = cell(size(conditions));
%     constk = [];
    for a = 1:length(conditions)
        r = conditions{a};
        indx = strfind(r,'\');
        cons{a} = r(indx(1)+1:end);
        
%         c = char(conditions{a});
%         c = [c,'=',num2str(a),', '];
%         constk = [constk c];
        
    end
    
    cons= unique(cons);
    
%     subject = [];   % old code
%     
%     for i = 1:length(subjects)
%         sub = subjects{i};
%         subs = sub(end-1:end);
%         subject = [subject;subs];            % returns char of numbers for just the number of the subject
%     end
    
    
        subject = char(ones(length(subjects),2));

   for i = 1:length(subjects)
        sub = subjects{i};
        subject(i,:) = sub(end-1:end);
    end
    
    
    subnum = [];
    
    for a = 1:length(txt(4:end,1))
        txt1 = txt{a};
        txt2 = txt1(end-2:end);
        subnum = [subnum;txt2];              % returns the subject numer for each row
    end
    
    
    for k = 1:length(subjects)
        
        sub_stk = [];
        
        for n = 1:length(txt)
            
            if ~isempty(strmatch(txt(n,1),subjects(k,:)))
                plate = xlsdata(n,:);
                sub_stk = [sub_stk;plate];     % stack of data for each subject
                grp = txt(n,2);
                grp = grp{1};
                indxx = strfind(grp,'\');
                grp = grp(1:indxx(1)-1);
            end
        end
        
        for l = 1:length(cons)
            
            sub_con_stk = [];
            plate = [];
            
            for n = 1:length(txt)
                
                r = txt(n,2);
                
                if  isin(r{1},cons{l})
                    plate = xlsdata(n,:);
                    sub_con_stk = [sub_con_stk;plate];          % all data for subject k, condition l
                end
            end
            
            sub_con_stk = intersect(sub_stk, sub_con_stk,'rows');   % note rows are sorted increasingly
            
            for m = 1:length(events)
                
                sub_con_evt = sub_con_stk(:,[2*m-1 2*m] );               % all data for subjectk, condition l , event m
                indx = find(sub_con_evt ==999);                 % data with 999 are outliers;
                sub_con_evt(indx)=NaN;
                mean_sub_con_evt = nanmean(sub_con_evt,1);
                
                indx = find(isnan(mean_sub_con_evt));                 % data with 999 are outliers;
                
                if ~isempty(indx)
                    mean_sub_con_evt(2) =999;                           %if all sub con  evt are Nan write 999
                end
                
                
                disp(['writing data for ',ch{j},' ',subjects{k},' ',cons{l},' ',events{m}])
                
                name = [ch{j},events{m}];
                
                if length(name) >31
                    disp('name too long for xlswrite11..shrinking name')
                    name = name(1:31);
                end
                
                if l==1
                    xlswrite1(xlsfile,{'Subject'},name,'A1');           % Headers
                    xlswrite1(xlsfile,cons',name,'C1');         % Headers
                    xlswrite1(xlsfile,{'group'},name,'B1');         % Headers
                end
                
                xlswrite1(xlsfile,k,name,['A',num2str(count+1)]);     %subject
                
                xlswrite1(xlsfile,{grp},name,['B',num2str(k+1)]);  %group
                xlswrite1(xlsfile,mean_sub_con_evt(2),name,[cols{l+1},num2str(k+1)]);  %data
                
            end
        end
        
        count = count +1;
        
    end
    
    
    
end





%----------CLOSE EXCEL SERVER----------

invoke(Excel.ActiveWorkbook,'Save');
Excel.Quit
Excel.delete
clear Excel


% Now make a new summary sheet with all the information from each sheet
%
disp(' ')
disp('Preparing summary sheet')
disp(' ')

nsheet = 'alldata';
[~, ch] = xlsfinfo(xlsfile);
ch = setdiff(ch,{'Sheet1','Sheet2','Sheet3'});

[xlsdata,txt] = xlsread(xlsfile,ch{1});   % read first sheet

xlswrite(xlsfile,txt(:,1:2),nsheet,'A1');           % write cols 1 and 2 (subs + groups)
xlswrite(xlsfile,xlsdata(:,1),nsheet,'A2');           % write cols 1 and 2 (subs + groups)

count = 0;  
for j = 1:length(ch)
    
    xlsdata = xlsread(xlsfile,ch{j});   % read first sheet

    for c=1:length(cons)
        ncon = [ch{j},'_',cons{c}];

        disp(['writing summary data for ',ch{j}])
        xlswrite(xlsfile,{ncon},nsheet,[cols{2+count},'1']);           % write new condition headers
        
        if c==1
           xlswrite(xlsfile,xlsdata(:,3:end),nsheet,[cols{2+count},'2']);         % Headers
        end
              
        count = count+1;
    end
    
end







% %----------CLOSE EXCEL SERVER----------
% 
% invoke(Excel.ActiveWorkbook,'Save');
% Excel.Quit
% Excel.delete
% clear Excel




%---SHOW END OF PROGRAM-------
disp(' ')
disp('****************************')
disp('Finished running data for: ')
disp(' ')
disp(xlsfile)
toc
disp('****************************')











